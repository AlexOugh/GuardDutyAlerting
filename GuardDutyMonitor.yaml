AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This sample, non-production-ready AWS CloudFormation template creates an
  alerting function to monitor AWS GuardDuty Findings.  The findings are sent to 
  an SNS topic and saved to a CloudWatch Log.  It can optionally send findings to 
  a different account using a CloudWatch Subscription.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: AWS Lambda parameters
        Parameters:
          - LambdaTimeout
          - LambdaS3Bucket
          - LambdaS3Key
      - Label:
          default: SNS Alerting Parameters
        Parameters:
          - SNSTopicName
          - SNSSubscription
      - Label:
          default: GuardDuty Alert Log
        Parameters:
          - CloudWatchLogGroupName
          - CreateCloudWatchSubscription
          - CloudWatchLogDestinationArn
Parameters:
  CloudWatchLogGroupName:
    Description: Local Cloudwatch Log Group where alerts are sent
    Default: 'GuardDutyAlertLog'
    Type: String
  CreateCloudWatchSubscription:
    Type: String
    Description: Select Yes to create a CloudWatch Subscription to send alerts to an alerting account.  Select No if you do not want to enable the Subscription.
    AllowedValues: ["Yes", "No"]
  CloudWatchLogDestinationArn:
    Type: String
    Description: CloudWatch Log Destination Arn. This destination must be in the same region with current one.
  LambdaTimeout:
    Type: Number
    Default: '60'
    Description: >-
      Enter a timeout value in seconds for the lambda function. Min is 3, max is
      300 and default is 60.
  LambdaS3Bucket:
    Description: Name of the S3 bucket where the lambda function is stored
    Type: String
  LambdaS3Key:
    Description: Name of the S3 key of the Lambda function (include the prefix as well)
    Type: String
  SNSTopicName:
    Description: Name of SNS Topic to alert
    Default: 'GuardDutyAlertingTopic'
    Type: String
  SNSSubscription:
    Description:  Email address to send alerts to
    Type: String
Conditions:
  CreateCloudWatchSubscription: !Equals [!Ref CreateCloudWatchSubscription, "Yes"]
Resources:
  GuardDutyAlertingSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: GuardDuty Alerting Topic
      Subscription:
        - Endpoint: !Ref SNSSubscription
          Protocol: email
      TopicName: !Join
        - "-"
        - - !Ref SNSTopicName
          - !Ref AWS::Region
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - !Ref CloudWatchLogGroupName
          - !Ref AWS::Region
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CreateCloudWatchSubscription
    DependsOn: CloudWatchLogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - !Ref CloudWatchLogGroupName
          - !Ref AWS::Region
      FilterPattern: ""
      DestinationArn: !Ref CloudWatchLogDestinationArn
  EventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Events rule for monitoring root API activity
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      Name: !Sub '${AWS::StackName}-GuardDutyRule'
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - GuardDutyAlertLambda
            - Arn
          Id: !Ref 'AWS::StackName'
  GuardDutyAlertLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Handler: GuardDutyAlertLambda.lambda_handler
      Role: !GetAtt 
        - GuardDutyAlertLambdaRole
        - Arn
      Runtime: python2.7
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          CLOUDWATCHLOGNAME: !Join
            - "/"
            - - !Ref CloudWatchLogGroupName
              - !Ref AWS::Region
          CLOUDWATCHDESTINATION: !Ref CloudWatchLogDestinationArn
          SNSARN: !Ref GuardDutyAlertingSNSTopic
  GuardDutyAlertLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${AWS::StackName}-GuardDutyAlertLambdaRole'
  GuardDutyAlertLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: GuardDutyAlertLambdaRole
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: LogStreamAccess
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource:
              - 'arn:aws:logs:*:*:*'
          - Sid: SNSPublishAllow
            Effect: Allow
            Action:
              - 'sns:Publish'
            Resource:
              - 'arn:aws:sns:*:*:*'
          - Sid: ListAccountAlias
            Action:
              - 'iam:ListAccountAliases'
            Effect: Allow
            Resource: '*'
      PolicyName: !Sub '${AWS::StackName}-GuardDutyAlertLambdaPolicy'
      Roles:
        - !Ref GuardDutyAlertLambdaRole
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GuardDutyAlertLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - EventsRule
        - Arn
Outputs:
  EventsRule:
    Value: !Ref EventsRule
    Export:
      Name: !Sub '${AWS::StackName}-GuardDutyMonitorEventsRule'
    Description: Event Rule ID.
  LambdaFuncName:
    Value: !Ref GuardDutyAlertLambda
    Export:
      Name: !Sub '${AWS::StackName}-GuardDutyMonitorLambda'
    Description: Lambda function logical ID.
  CloudWatchLogGroup:
    Value: !Ref CloudWatchLogGroup
    Description: Local Cloudwatch Log Group for alerts